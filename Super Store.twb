<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20193.19.0821.2225                               -->
<workbook source-build='2019.3.0 (20193.19.0821.2225)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <AutoCreateAndUpdateDSDPhoneLayouts ignorable='true' predowngraded='true' />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <SheetIdentifierTracking ignorable='true' predowngraded='true' />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
    <ZoneBackgroundTransparency />
  </document-format-change-manifest>
  <repository-location id='Superstore_us' path='/workbooks' revision='1.2' />
  <preferences>
    <preference name='datagrid.autoupdate.max.filesize' value='100000000000' />
    <preference name='ui.discoverpane.stagingWebContentSwitch' value='1' />
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.registrationform.stagingWebContentSwitch' value='1' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='18.1'>
      <aliases enabled='yes' />
      <column caption='Base Salary' datatype='integer' name='[Base Salary]' param-domain-type='range' role='measure' type='quantitative' value='50000'>
        <calculation class='tableau' formula='50000' />
        <range granularity='1000' min='0' />
      </column>
      <column caption='Commission Rate' datatype='real' default-format='n#,##0.0&quot;%&quot;;-#,##0.0&quot;%&quot;' name='[Commission Rate]' param-domain-type='range' role='measure' type='quantitative' value='18.400000000000002'>
        <calculation class='tableau' formula='18.400000000000002' />
        <range granularity='0.10000000000000001' max='100.0' min='1.0' />
      </column>
      <column caption='New Quota' datatype='integer' default-format='c&quot;$&quot;#,##0,K;(&quot;$&quot;#,##0,K)' name='[New Quota]' param-domain-type='range' role='measure' type='quantitative' value='500000'>
        <calculation class='tableau' formula='500000' />
        <range granularity='25000' min='100000' />
      </column>
      <column caption='Sort by' datatype='string' name='[Parameter 1 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Names&quot;'>
        <calculation class='tableau' formula='&quot;Names&quot;' />
        <members>
          <member value='&quot;\% quota ascending&quot;' />
          <member value='&quot;\% quota descending&quot;' />
          <member value='&quot;Names&quot;' />
        </members>
      </column>
      <column caption='New Business Growth' datatype='real' default-format='p0%' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='0.59999999999999998'>
        <calculation class='tableau' formula='0.59999999999999998' />
        <range granularity='0.01' max='1.0' min='0.0' />
      </column>
      <column caption='Churn Rate' datatype='real' default-format='p0.00%' name='[Parameter 2]' param-domain-type='range' role='measure' type='quantitative' value='0.064000000000000001'>
        <calculation class='tableau' formula='0.064000000000000001' />
        <range granularity='0.001' max='0.25' min='0.0' />
      </column>
    </datasource>
    <datasource caption='Sales Target Extract' inline='true' name='federated.0z0pi331stuxay1ce6y5f1yxvsw9' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Sales Target' name='hyper.0b9ww9a086u1d41dqjy2d0vs8f1i'>
            <connection authentication='auth-none' author-locale='en_US' class='hyper' dbname='C:/Users/Hp/Desktop/Tableau/Super Store.twb Files/Data/Superstore/Sales Target.hyper' default-settings='yes' sslmode='' username='tableau_internal_user' />
          </named-connection>
        </named-connections>
        <relation connection='hyper.0b9ww9a086u1d41dqjy2d0vs8f1i' name='Extract' table='[Extract].[Extract]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Category</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Category]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Category</remote-alias>
            <ordinal>0</ordinal>
            <family>Sheet1</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Order Date</remote-name>
            <remote-type>133</remote-type>
            <local-name>[Order Date]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Order Date</remote-alias>
            <ordinal>1</ordinal>
            <family>Sheet1</family>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <approx-count>1185</approx-count>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Segment</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Segment]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Segment</remote-alias>
            <ordinal>2</ordinal>
            <family>Sheet1</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sales Target</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Sales Target]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Sales Target</remote-alias>
            <ordinal>3</ordinal>
            <family>Sheet1</family>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>1045</approx-count>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <layout dim-ordering='alphabetic' dim-percentage='0.315254' measure-ordering='alphabetic' measure-percentage='0.264407' parameter-percentage='0.420339' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='Sales Commission' inline='true' name='Sales Planning new' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Sales Commission' name='Sales Planning newleaf'>
            <connection authentication='auth-none' author-locale='en_US' class='hyper' dbname='C:/Users/Hp/Desktop/Tableau/Super Store.twb Files/Data/Superstore/Sales Commission.hyper' default-settings='yes' sslmode='' username='tableau_internal_user' />
          </named-connection>
        </named-connections>
        <relation connection='Sales Planning newleaf' name='Extract' table='[Extract].[Extract]' type='table' />
        <calculations>
          <calculation column='[Number of Records]' formula='1' />
        </calculations>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Order Date</remote-name>
            <remote-type>135</remote-type>
            <local-name>[Order Date]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Order Date</remote-alias>
            <ordinal>0</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <approx-count>1</approx-count>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Region</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Region]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Region</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3</approx-count>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sales Person</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Sales Person]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Sales Person</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>41</approx-count>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sales</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Sales]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Sales</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>43</approx-count>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Achievement (estimated)' datatype='integer' default-format='C1033%' name='[Achievement (copy)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Sales]' scope-isolation='false' />
      </column>
      <column caption='Achieved Quota' datatype='string' name='[Achievement (variable) (copy)]' role='measure' type='nominal'>
        <calculation class='tableau' formula='if SUM([Achievement (copy)]) &gt;= [Parameters].[New Quota] then &quot;100% +&quot;&#13;&#10;elseif SUM([Achievement (copy)]) &gt;= 0.75 * [Parameters].[New Quota] then &quot;75-100%&quot;&#13;&#10;elseif SUM([Achievement (copy)]) &gt;= 0.5 * [Parameters].[New Quota] then &quot;50-75%&quot;&#13;&#10;else &quot;Below 50%&quot; end' />
      </column>
      <column datatype='integer' default-format='C1033%' name='[Base (Variable)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Parameters].[Base Salary]' />
      </column>
      <column caption='% of quota achieved' datatype='real' default-format='p0%' name='[Calculation_0440925131659539]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='AVG([Achievement (copy)])/[Parameters].[New Quota]' scope-isolation='false' />
      </column>
      <column caption='Rank over 3' datatype='real' name='[Calculation_4120925132203686]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='ROUND(INDEX() / 3 - 0.6,0) + 1'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Sort by field' datatype='real' name='[Calculation_8140925133029303]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='if [Parameters].[Parameter 1 1]=&quot;Names&quot; then 0&#13;&#10;elseif [Parameters].[Parameter 1 1]=&quot;% quota descending&quot; then -[Calculation_0440925131659539]&#13;&#10;else [Calculation_0440925131659539] end' />
      </column>
      <column datatype='real' default-format='C1033%' name='[Commission (Variable)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Parameters].[Commission Rate]*[Sales])/100' scope-isolation='false' />
      </column>
      <column datatype='string' name='[Estimate Compensation label]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='&quot;Estimated Compensation:&quot;' />
        <aliases>
          <alias key='&quot;Estimated Compensation:&quot;' value='Estimated total compensation' />
        </aliases>
      </column>
      <column datatype='real' default-format='C1033%' name='[OTE (Variable)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Parameters].[Base Salary] + ([Parameters].[Commission Rate]*[Parameters].[New Quota])/100' />
      </column>
      <column datatype='datetime' name='[Order Date]' role='dimension' type='ordinal' />
      <column datatype='string' name='[Region]' role='dimension' type='nominal' />
      <column caption='Sales Person1' datatype='string' name='[Sales Person]' role='dimension' type='nominal' />
      <column datatype='integer' default-format='n#,##0;-#,##0' name='[Sales]' role='measure' type='quantitative' />
      <column datatype='real' default-format='C1033%' name='[Total Compensation]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='MIN([Base (Variable)]) + SUM([Commission (Variable)])' />
      </column>
      <column datatype='string' name='[Total Sales label]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='&quot;Total Sales:&quot;' />
        <aliases>
          <alias key='&quot;Total Sales:&quot;' value='Total' />
        </aliases>
      </column>
      <column-instance column='[Base (Variable)]' derivation='Min' name='[min:Base (Variable):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Order Date]' derivation='Month' name='[mn:Order Date:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Commission (Variable)]' derivation='Sum' name='[sum:Commission (Variable):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Order Date]' derivation='Month-Trunc' name='[tmn:Order Date:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Order Date]' derivation='Week-Trunc' name='[twk:Order Date:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Achievement (variable) (copy)]' derivation='User' name='[usr:Achievement (variable) (copy):nk]' pivot='key' type='nominal' />
      <column-instance column='[Order Date]' derivation='Year' name='[yr:Order Date:ok]' pivot='key' type='ordinal' />
      <group hidden='true' name='[Action (Call Center)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Region]' />
        </groupfilter>
      </group>
      <group caption='Action (MONTH(Order Date))' hidden='true' name='[Action (MONTH(Order Date))]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[tmn:Order Date:ok]' />
        </groupfilter>
      </group>
      <group caption='Action (Next Button)' hidden='true' name='[Action (Next Button)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_2310128142449424]' />
        </groupfilter>
      </group>
      <group caption='Action (Previous Button)' hidden='true' name='[Action (Previous Button)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Next (copy)]' />
        </groupfilter>
      </group>
      <group caption='Action (YEAR(Order Date),MONTH(Order Date))' hidden='true' name='[Action (YEAR(Order Date),MONTH(Order Date))]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[yr:Order Date:ok]' />
          <groupfilter function='level-members' level='[mn:Order Date:ok]' />
        </groupfilter>
      </group>
      <group caption='Action (YEAR(Order Date),WEEK(Order Date))' hidden='true' name='[Action (YEAR(Order Date),WEEK(Order Date))]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[yr:Order Date:ok]' />
          <groupfilter function='level-members' level='[twk:Order Date:ok]' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.367797' measure-ordering='alphabetic' measure-percentage='0.379661' parameter-percentage='0.252542' show-structure='true' user-set-layout='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[usr:Achievement (variable) (copy):nk]' palette='tableau10_10_0' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;50-75\%&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Below 50\%&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;100\% +&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;75-100\%&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#5f9ed1'>
              <bucket>&quot;[Sales Planning new].[sum:Commission (Variable):qk]&quot;</bucket>
            </map>
            <map to='#898989'>
              <bucket>&quot;[Sales Planning new].[min:Base (Variable):qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Base Salary' datatype='integer' name='[Base Salary]' param-domain-type='range' role='measure' type='quantitative' value='50000'>
          <calculation class='tableau' formula='50000' />
          <range granularity='1000' min='0' />
        </column>
        <column caption='Commission Rate' datatype='real' default-format='n#,##0.0&quot;%&quot;;-#,##0.0&quot;%&quot;' name='[Commission Rate]' param-domain-type='range' role='measure' type='quantitative' value='18.400000000000002'>
          <calculation class='tableau' formula='18.400000000000002' />
          <range granularity='0.10000000000000001' max='100.0' min='1.0' />
        </column>
        <column caption='New Quota' datatype='integer' default-format='c&quot;$&quot;#,##0,K;(&quot;$&quot;#,##0,K)' name='[New Quota]' param-domain-type='range' role='measure' type='quantitative' value='500000'>
          <calculation class='tableau' formula='500000' />
          <range granularity='25000' min='100000' />
        </column>
        <column caption='Sort by' datatype='string' name='[Parameter 1 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Names&quot;'>
          <calculation class='tableau' formula='&quot;Names&quot;' />
        </column>
      </datasource-dependencies>
    </datasource>
    <datasource caption='Sample - Superstore' inline='true' name='dataengine.42019.618651678240' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Sample - Superstore' name='dataengine.42019.618651678240leaf'>
            <connection authentication='auth-none' author-locale='en_US' class='hyper' dbname='C:/Users/Hp/Desktop/Tableau/Super Store.twb Files/Data/Superstore/Sample - Superstore.hyper' default-settings='yes' port='' sslmode='' username='tableau_internal_user'>
              <calculations>
                <calculation column='[Number of Records]' formula='1' />
              </calculations>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='dataengine.42019.618651678240leaf' name='Extract' table='[Extract].[Extract]' type='table' />
        <calculations>
          <calculation column='[Number of Records]' formula='1' />
        </calculations>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Row ID</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Row ID]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Row ID</remote-alias>
            <ordinal>0</ordinal>
            <family>Orders</family>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>5136</approx-count>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Order ID</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Order ID]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Order ID</remote-alias>
            <ordinal>1</ordinal>
            <family>Orders</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3095</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Order Date</remote-name>
            <remote-type>133</remote-type>
            <local-name>[Order Date]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Order Date</remote-alias>
            <ordinal>2</ordinal>
            <family>Orders</family>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <approx-count>1419</approx-count>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Ship Date</remote-name>
            <remote-type>133</remote-type>
            <local-name>[Ship Date]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Ship Date</remote-alias>
            <ordinal>3</ordinal>
            <family>Orders</family>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <approx-count>1482</approx-count>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Ship Mode</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Ship Mode]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Ship Mode</remote-alias>
            <ordinal>4</ordinal>
            <family>Orders</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>4</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Customer ID</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Customer ID]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Customer ID</remote-alias>
            <ordinal>5</ordinal>
            <family>Orders</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>1134</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Customer Name</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Customer Name]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Customer Name</remote-alias>
            <ordinal>6</ordinal>
            <family>Orders</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>1134</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Segment</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Segment]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Segment</remote-alias>
            <ordinal>7</ordinal>
            <family>Orders</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country/Region</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country/Region]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Country/Region</remote-alias>
            <ordinal>8</ordinal>
            <family>Orders</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>1</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>City</remote-name>
            <remote-type>129</remote-type>
            <local-name>[City]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>City</remote-alias>
            <ordinal>9</ordinal>
            <family>Orders</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>580</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State</remote-name>
            <remote-type>129</remote-type>
            <local-name>[State]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>State</remote-alias>
            <ordinal>10</ordinal>
            <family>Orders</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>54</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Postal Code</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Postal Code]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Postal Code</remote-alias>
            <ordinal>11</ordinal>
            <family>Orders</family>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>719</approx-count>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Region</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Region]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Region</remote-alias>
            <ordinal>12</ordinal>
            <family>Orders</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>4</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Product ID</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Product ID]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Product ID</remote-alias>
            <ordinal>13</ordinal>
            <family>Orders</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>2226</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Category</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Category]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Category</remote-alias>
            <ordinal>14</ordinal>
            <family>Orders</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sub-Category</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Sub-Category]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Sub-Category</remote-alias>
            <ordinal>15</ordinal>
            <family>Orders</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>17</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Product Name</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Product Name]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Product Name</remote-alias>
            <ordinal>16</ordinal>
            <family>Orders</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>2203</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sales</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Sales]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Sales</remote-alias>
            <ordinal>17</ordinal>
            <family>Orders</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>3420</approx-count>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Quantity</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Quantity]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Quantity</remote-alias>
            <ordinal>18</ordinal>
            <family>Orders</family>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>14</approx-count>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Discount</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Discount]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Discount</remote-alias>
            <ordinal>19</ordinal>
            <family>Orders</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>16</approx-count>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Profit</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Profit]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Profit</remote-alias>
            <ordinal>20</ordinal>
            <family>Orders</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>4120</approx-count>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Person</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Person]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Person</remote-alias>
            <ordinal>21</ordinal>
            <family>People</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>4</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Returned</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Returned]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Returned</remote-alias>
            <ordinal>22</ordinal>
            <family>Returns</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>2</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[dataengine.42019.618651678240].[ctd:Customer Name:qk]&quot;' value='Count of Customers' />
        </aliases>
      </column>
      <column caption='Days to Ship Actual' datatype='integer' name='[Calculation_0831103151444568]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='DATEDIFF(&apos;day&apos;,[Order Date],[Ship Date])' />
      </column>
      <column caption='Sales Forecast' datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Calculation_5421109230915137]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Sales]*(1-[Parameters].[Parameter 2])*(1+[Parameters].[Parameter 1])' />
      </column>
      <column caption='Ship Status' datatype='string' name='[Calculation_6401103171259723]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='if [Calculation_0831103151444568]&gt; [Calculation_6861103170623145] then &quot;Shipped Late&quot; &#13;&#10;elseIF [Calculation_0831103151444568]= [Calculation_6861103170623145] then &quot;Shipped On Time&quot;&#13;&#10;Else &quot;Shipped Early&quot; end' />
        <desc>
          <formatted-text>
            <run>Was shipment early, ontime or late based on ship mode</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Days to Ship Scheduled' datatype='integer' name='[Calculation_6861103170623145]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE  [Ship Mode]&#13;&#10;WHEN &quot;Same Day&quot; THEN 0&#13;&#10;WHEN &quot;First Class&quot; THEN 1&#13;&#10;WHEN &quot;Second Class&quot; THEN 3&#13;&#10;WHEN &quot;Standard Class&quot; THEN 6&#13;&#10;END' />
      </column>
      <column caption='Order Profitable?' datatype='boolean' name='[Calculation_9060122104947471]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='{fixed [Order ID]:sum([Profit])}&gt;0&#13;&#10;// calculates the profit at the order level' />
        <aliases>
          <alias key='false' value='Unprofitable' />
          <alias key='true' value='Profitable' />
        </aliases>
        <desc>
          <formatted-text>
            <run>A level of detail expression that calculates profitability for each Order</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Profit per Customer' datatype='real' default-format='C1033%' hidden='true' name='[Calculation_9321103144526191 1]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Profit])/countD([Customer Name])' />
      </column>
      <column caption='Sales per Customer' datatype='real' default-format='C1033%' name='[Calculation_9321103144526191]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='Sum([Sales])/countD([Customer Name])' />
      </column>
      <column caption='Profit Ratio' datatype='real' default-format='p0.0%' name='[Calculation_9921103144103743]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Profit])/sum([Sales])' />
      </column>
      <column caption='Sales above Target?' datatype='string' name='[Calculation_9951107165644870]' role='measure' type='nominal'>
        <calculation class='tableau' formula='If Sum([Sales])&gt;SUM([federated.0z0pi331stuxay1ce6y5f1yxvsw9].[Sales Target]) then &quot;Above Target&quot; else &quot;Below Target&quot; end' />
        <desc>
          <formatted-text>
            <run>Used with &quot;Sales Target&quot; data source</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='string' name='[Category]' role='dimension' type='nominal' />
      <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
      <column aggregation='None' datatype='string' name='[Country/Region]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
      <column datatype='string' hidden='true' name='[Customer ID]' role='dimension' type='nominal' />
      <column datatype='string' name='[Customer Name]' role='dimension' type='nominal' />
      <column datatype='real' default-format='p0.00%' name='[Discount]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='date' name='[Order Date]' role='dimension' type='ordinal' />
      <column datatype='string' name='[Order ID]' role='dimension' type='nominal' />
      <column datatype='real' hidden='true' name='[Order Quantity]' role='measure' type='quantitative' />
      <column datatype='integer' default-format='*00000' name='[Postal Code]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal' />
      <column datatype='string' hidden='true' name='[Product ID]' role='dimension' type='nominal' />
      <column datatype='string' name='[Product Name]' role='dimension' type='nominal' />
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Profit]' role='measure' type='quantitative' />
      <column aggregate-role-from='[State]' datatype='string' name='[Region]' role='dimension' type='nominal' />
      <column datatype='integer' hidden='true' name='[Row ID]' role='measure' type='quantitative' />
      <column caption='Units estimate' datatype='real' default-format='n#,##0;-#,##0' hidden='true' name='[Sales est (copy)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='ROUND([Quantity]*(1-[Parameters].[Parameter 2])*(1+[Parameters].[Parameter 1]),0)' scope-isolation='false' />
      </column>
      <column caption='Profit per Order' datatype='real' default-format='C1033%' name='[Sales per Customer (copy)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='Sum([Profit])/countD([Order ID])' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Sales]' role='measure' type='quantitative' />
      <column datatype='string' name='[Segment]' role='dimension' type='nominal' />
      <column datatype='string' name='[Ship Mode]' role='dimension' type='nominal' />
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
      <column-instance column='[Customer Name]' derivation='CountD' name='[ctd:Customer Name:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Profit]' derivation='Sum' name='[diff:sum:Profit:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Order Date]' derivation='Month' name='[mn:Order Date:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Calculation_6401103171259723]' derivation='None' name='[none:Calculation_6401103171259723:nk]' pivot='key' type='nominal' />
      <column-instance column='[Calculation_9060122104947471]' derivation='None' name='[none:Calculation_9060122104947471:nk]' pivot='key' type='nominal' />
      <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
      <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
      <column-instance column='[Postal Code]' derivation='None' name='[none:Postal Code:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
      <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
      <column-instance column='[Profit]' derivation='Sum' name='[pcto:sum:Profit:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[Order Date]' derivation='Quarter' name='[qr:Order Date:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Sales]' derivation='Sum' name='[rank:sum:Sales:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Columns' rank-options='Competition,Descending' type='Rank' />
      </column-instance>
      <column-instance column='[Calculation_5421109230915137]' derivation='Sum' name='[sum:Calculation_5421109230915137:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Sales est (copy)]' derivation='Sum' name='[sum:Sales est (copy):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Order Date]' derivation='Month-Trunc' name='[tmn:Order Date:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Order Date]' derivation='Week-Trunc' name='[twk:Order Date:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Calculation_9921103144103743]' derivation='User' name='[usr:Calculation_9921103144103743:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_9951107165644870]' derivation='User' name='[usr:Calculation_9951107165644870:nk]' pivot='key' type='nominal' />
      <column-instance column='[Order Date]' derivation='Year' name='[yr:Order Date:ok]' pivot='key' type='ordinal' />
      <group hidden='true' name='[Action (Category)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Category]' />
        </groupfilter>
      </group>
      <group caption='Action (Category,MONTH(Order Date))' hidden='true' name='[Action (Category,MONTH(Order Date))]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Category]' />
          <groupfilter function='level-members' level='[tmn:Order Date:ok]' />
        </groupfilter>
      </group>
      <group caption='Action (Category,YEAR(Order Date),MONTH(Order Date))' hidden='true' name='[Action (Category,YEAR(Order Date),MONTH(Order Date))]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Category]' />
          <groupfilter function='level-members' level='[yr:Order Date:ok]' />
          <groupfilter function='level-members' level='[mn:Order Date:ok]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Action (Customer Segment)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:Segment:nk]' />
        </groupfilter>
      </group>
      <group caption='Action (Delayed?)' hidden='true' name='[Action (Delayed?)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_6401103171259723]' />
        </groupfilter>
      </group>
      <group caption='Action (MONTH(Order Date),Product Category)' hidden='true' name='[Action (MONTH(Order Date),Product Category)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[tmn:Order Date:ok]' />
          <groupfilter function='level-members' level='[none:Category:nk]' />
        </groupfilter>
      </group>
      <group caption='Action (MONTH(Order Date),Product Category,ProductSub-Category)' hidden='true' name='[Action (MONTH(Order Date),Product Category,ProductSub-Category)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[mn:Order Date:ok]' />
          <groupfilter function='level-members' level='[none:Category:nk]' />
          <groupfilter function='level-members' level='[none:Sub-Category:nk]' />
        </groupfilter>
      </group>
      <group caption='Action (MONTH(Order Date),Product Category,Segment) 1' hidden='true' name='[Action (MONTH(Order Date),Product Category,Segment) 1]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[mn:Order Date:ok]' />
          <groupfilter function='level-members' level='[none:Category:nk]' />
          <groupfilter function='level-members' level='[Segment]' />
        </groupfilter>
      </group>
      <group caption='Action (MONTH(Order Date),Product Category,Segment)' hidden='true' name='[Action (MONTH(Order Date),Product Category,Segment)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[tmn:Order Date:ok]' />
          <groupfilter function='level-members' level='[none:Category:nk]' />
          <groupfilter function='level-members' level='[Segment]' />
        </groupfilter>
      </group>
      <group caption='Action (MONTH(Order Date),ProductSub-Category)' hidden='true' name='[Action (MONTH(Order Date),ProductSub-Category)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[mn:Order Date:ok]' />
          <groupfilter function='level-members' level='[none:Sub-Category:nk]' />
        </groupfilter>
      </group>
      <group caption='Action (MONTH(Order Date),Segment)' hidden='true' name='[Action (MONTH(Order Date),Segment)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[tmn:Order Date:ok]' />
          <groupfilter function='level-members' level='[Segment]' />
        </groupfilter>
      </group>
      <group caption='Action (Order Profitable?,Category,MONTH(Order Date))' hidden='true' name='[Action (Order Profitable?,Category,MONTH(Order Date))]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_9060122104947471]' />
          <groupfilter function='level-members' level='[Category]' />
          <groupfilter function='level-members' level='[tmn:Order Date:ok]' />
        </groupfilter>
      </group>
      <group caption='Action (Order Profitable?,MONTH(Order Date),Segment)' hidden='true' name='[Action (Order Profitable?,MONTH(Order Date),Segment)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_9060122104947471]' />
          <groupfilter function='level-members' level='[tmn:Order Date:ok]' />
          <groupfilter function='level-members' level='[Segment]' />
        </groupfilter>
      </group>
      <group caption='Action (Postal Code,State) 1' hidden='true' name='[Action (Postal Code,State) 1]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Postal Code]' />
          <groupfilter function='level-members' level='[State]' />
        </groupfilter>
      </group>
      <group caption='Action (Postal Code,State)' hidden='true' name='[Action (Postal Code,State)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:Postal Code:ok]' />
          <groupfilter function='level-members' level='[State]' />
        </groupfilter>
      </group>
      <group caption='Action (Product Category,ProductSub-Category,Segment)' hidden='true' name='[Action (Product Category,ProductSub-Category,Segment)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:Category:nk]' />
          <groupfilter function='level-members' level='[none:Sub-Category:nk]' />
          <groupfilter function='level-members' level='[Segment]' />
        </groupfilter>
      </group>
      <group caption='Action (ProductSub-Category,Region,Segment)' hidden='true' name='[Action (ProductSub-Category,Region,Segment)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:Sub-Category:nk]' />
          <groupfilter function='level-members' level='[Region]' />
          <groupfilter function='level-members' level='[Segment]' />
        </groupfilter>
      </group>
      <group caption='Action (ProductSub-Category,State)' hidden='true' name='[Action (ProductSub-Category,State)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:Sub-Category:nk]' />
          <groupfilter function='level-members' level='[State]' />
        </groupfilter>
      </group>
      <group caption='Action (QUARTER(Order Date),MONTH(Order Date),Product Category,ProductSub-Category)' hidden='true' name='[Action (QUARTER(Order Date),MONTH(Order Date),Product Category,ProductSub-Category)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[qr:Order Date:ok]' />
          <groupfilter function='level-members' level='[mn:Order Date:ok]' />
          <groupfilter function='level-members' level='[none:Category:nk]' />
          <groupfilter function='level-members' level='[none:Sub-Category:nk]' />
        </groupfilter>
      </group>
      <group caption='Action (QUARTER(Order Date),MONTH(Order Date),ProductSub-Category)' hidden='true' name='[Action (QUARTER(Order Date),MONTH(Order Date),ProductSub-Category)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[qr:Order Date:ok]' />
          <groupfilter function='level-members' level='[mn:Order Date:ok]' />
          <groupfilter function='level-members' level='[none:Sub-Category:nk]' />
        </groupfilter>
      </group>
      <group caption='Action (Region)' hidden='true' name='[Action (Region)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Region]' />
        </groupfilter>
      </group>
      <group caption='Action (Segment)' hidden='true' name='[Action (Segment)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Segment]' />
        </groupfilter>
      </group>
      <group caption='Action (Ship Status)' hidden='true' name='[Action (Ship Status)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_6401103171259723]' />
        </groupfilter>
      </group>
      <group caption='Action (Ship Status,Customer Name,Order Date,Order ID,Product Name,Ship Mode)' hidden='true' name='[Action (Ship Status,Customer Name,Order Date,Order ID,Product Name,Ship Mode)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_6401103171259723]' />
          <groupfilter function='level-members' level='[Customer Name]' />
          <groupfilter function='level-members' level='[Order Date]' />
          <groupfilter function='level-members' level='[Order ID]' />
          <groupfilter function='level-members' level='[Product Name]' />
          <groupfilter function='level-members' level='[Ship Mode]' />
        </groupfilter>
      </group>
      <group caption='Action (Ship Status,YEAR(Order Date),WEEK(Order Date))' hidden='true' name='[Action (Ship Status,YEAR(Order Date),WEEK(Order Date))]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_6401103171259723]' />
          <groupfilter function='level-members' level='[yr:Order Date:ok]' />
          <groupfilter function='level-members' level='[twk:Order Date:ok]' />
        </groupfilter>
      </group>
      <group caption='Action (State)' hidden='true' name='[Action (State)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[State]' />
        </groupfilter>
      </group>
      <group caption='Action (Transaction Profit,MONTH(Order Date),Segment)' hidden='true' name='[Action (Transaction Profit,MONTH(Order Date),Segment)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_9060122104947471]' />
          <groupfilter function='level-members' level='[tmn:Order Date:ok]' />
          <groupfilter function='level-members' level='[Segment]' />
        </groupfilter>
      </group>
      <group caption='Action (YEAR(Order Date),MONTH(Order Date))' hidden='true' name='[Action (YEAR(Order Date),MONTH(Order Date))]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[yr:Order Date:ok]' />
          <groupfilter function='level-members' level='[mn:Order Date:ok]' />
        </groupfilter>
      </group>
      <group caption='Action (YEAR(Order Date),MONTH(Order Date),Product Category)' hidden='true' name='[Action (YEAR(Order Date),MONTH(Order Date),Product Category)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[yr:Order Date:ok]' />
          <groupfilter function='level-members' level='[mn:Order Date:ok]' />
          <groupfilter function='level-members' level='[none:Category:nk]' />
        </groupfilter>
      </group>
      <group caption='Action (YEAR(Order Date),MONTH(Order Date),Segment)' hidden='true' name='[Action (YEAR(Order Date),MONTH(Order Date),Segment)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[yr:Order Date:ok]' />
          <groupfilter function='level-members' level='[tmn:Order Date:ok]' />
          <groupfilter function='level-members' level='[Segment]' />
        </groupfilter>
      </group>
      <group caption='Tooltip (State)' hidden='true' name='[Tooltip (State)]' name-style='unqualified' user:auto-column='sheet_link' user:ui-vit-column='true'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[State]' />
        </groupfilter>
      </group>
      <drill-paths>
        <drill-path name='Location'>
          <field>[Region]</field>
          <field>[Country/Region]</field>
          <field>[State]</field>
          <field>[City]</field>
          <field>[Postal Code]</field>
        </drill-path>
        <drill-path name='Product'>
          <field>[Category]</field>
          <field>[Sub-Category]</field>
          <field>[Product Name]</field>
        </drill-path>
      </drill-paths>
      <folder name='Customer' role='dimensions'>
        <folder-item name='[Customer ID]' type='field' />
        <folder-item name='[Customer Name]' type='field' />
        <folder-item name='[Segment]' type='field' />
      </folder>
      <folder name='Order' role='dimensions'>
        <folder-item name='[Order Date]' type='field' />
        <folder-item name='[Order ID]' type='field' />
        <folder-item name='[Ship Date]' type='field' />
        <folder-item name='[Ship Mode]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.311213' measure-ordering='alphabetic' measure-percentage='0.453089' parameter-percentage='0.235698' show-aliased-fields='true' show-structure='false' user-set-layout='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[Calculation_9921103144103743]' max='0.5' min='-0.5' palette='tableau-orange-blue' type='interpolated' />
          <encoding attr='color' field='[none:Forecast Indicator:nk]' type='palette'>
            <map to='#1f77b4'>
              <bucket>&quot;Actual&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Estimate&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Segment:nk]&#10;[none:Forecast Indicator:nk]' type='palette'>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Consumer&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Home Office&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Corporate&quot;</bucket>
            </map-pri>
          </encoding>
          <encoding attr='color' field='[usr:Calculation_9951107165644870:nk]' palette='nuriel_stone_10_0' type='palette'>
            <map to='#027b8e'>
              <bucket>&quot;Above Target&quot;</bucket>
            </map>
            <map to='#a39fc9'>
              <bucket>&quot;Below Target&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Calculation_6401103171259723:nk]' palette='tableau10_10_0' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Shipped Early&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;Shipped Late&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Shipped On Time&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Calculation_9060122104947471:nk]' type='palette'>
            <map to='#6388b4'>
              <bucket>true</bucket>
            </map>
            <map to='#ffae34'>
              <bucket>false</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Sub-Category:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Fasteners&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Accessories&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bookcases&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Paper&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Furnishings&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Chairs&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Appliances&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tables&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Copiers&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Phones&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Storage&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Labels&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Envelopes&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Art&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Supplies&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Machines&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Binders&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#000000'>
              <bucket>&quot;[dataengine.42019.618651678240].[usr:Calculation_9921103144103743:qk]&quot;</bucket>
            </map>
            <map to='#1c70ae'>
              <bucket>&quot;[dataengine.42019.618651678240].[sum:Calculation_5421109230915137:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[dataengine.42019.618651678240].[usr:Calculation_9330126204734562:qk]&quot;</bucket>
            </map>
            <map to='#414451'>
              <bucket>&quot;[dataengine.42019.618651678240].[rank:sum:Sales:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[dataengine.42019.618651678240].[pcto:sum:Profit:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[dataengine.42019.618651678240].[sum:Calculation_1641214165608856:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[dataengine.42019.618651678240].[sum:Sales:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[dataengine.42019.618651678240].[diff:sum:Profit:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[dataengine.42019.618651678240].[sum:Profit:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[dataengine.42019.618651678240].[sum:Sales est (copy):qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <default-sorts>
        <manual-sort column='[none:Forecast Indicator:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Actual&quot;</bucket>
            <bucket>&quot;Estimate&quot;</bucket>
          </dictionary>
        </manual-sort>
      </default-sorts>
      <datasource-dependencies datasource='Parameters'>
        <column caption='New Business Growth' datatype='real' default-format='p0%' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='0.59999999999999998'>
          <calculation class='tableau' formula='0.59999999999999998' />
          <range granularity='0.01' max='1.0' min='0.0' />
        </column>
        <column caption='Churn Rate' datatype='real' default-format='p0.00%' name='[Parameter 2]' param-domain-type='range' role='measure' type='quantitative' value='0.064000000000000001'>
          <calculation class='tableau' formula='0.064000000000000001' />
          <range granularity='0.001' max='0.25' min='0.0' />
        </column>
      </datasource-dependencies>
      <datasource-dependencies datasource='federated.0z0pi331stuxay1ce6y5f1yxvsw9'>
        <column datatype='integer' name='[Sales Target]' role='measure' type='quantitative' />
      </datasource-dependencies>
    </datasource>
  </datasources>
  <datasource-relationships>
    <datasource-dependencies datasource='dataengine.42019.618651678240'>
      <column datatype='string' name='[Category]' role='dimension' type='nominal' />
      <column datatype='date' name='[Order Date]' role='dimension' type='ordinal' />
      <column datatype='string' name='[Segment]' role='dimension' type='nominal' />
      <column-instance column='[Order Date]' derivation='Month' name='[mn:Order Date:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
      <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
      <column-instance column='[Order Date]' derivation='Month-Trunc' name='[tmn:Order Date:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Order Date]' derivation='Year-Trunc' name='[tyr:Order Date:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Order Date]' derivation='Year' name='[yr:Order Date:ok]' pivot='key' type='ordinal' />
    </datasource-dependencies>
    <datasource-dependencies datasource='federated.0z0pi331stuxay1ce6y5f1yxvsw9'>
      <column datatype='string' name='[Category]' role='dimension' type='nominal' />
      <column datatype='date' name='[Order Date]' role='dimension' type='ordinal' />
      <column datatype='string' name='[Segment]' role='dimension' type='nominal' />
      <column-instance column='[Order Date]' derivation='Month' name='[mn:Order Date:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
      <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
      <column-instance column='[Order Date]' derivation='Month-Trunc' name='[tmn:Order Date:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Order Date]' derivation='Year-Trunc' name='[tyr:Order Date:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Order Date]' derivation='Year' name='[yr:Order Date:ok]' pivot='key' type='ordinal' />
    </datasource-dependencies>
    <datasource-relationship source='dataengine.42019.618651678240' target='federated.0z0pi331stuxay1ce6y5f1yxvsw9'>
      <column-mapping>
        <map key='[dataengine.42019.618651678240].[mn:Order Date:ok]' value='[federated.0z0pi331stuxay1ce6y5f1yxvsw9].[mn:Order Date:ok]' />
        <map key='[dataengine.42019.618651678240].[none:Category:nk]' value='[federated.0z0pi331stuxay1ce6y5f1yxvsw9].[none:Category:nk]' />
        <map key='[dataengine.42019.618651678240].[none:Segment:nk]' value='[federated.0z0pi331stuxay1ce6y5f1yxvsw9].[none:Segment:nk]' />
        <map key='[dataengine.42019.618651678240].[tmn:Order Date:ok]' value='[federated.0z0pi331stuxay1ce6y5f1yxvsw9].[tmn:Order Date:ok]' />
        <map key='[dataengine.42019.618651678240].[tyr:Order Date:ok]' value='[federated.0z0pi331stuxay1ce6y5f1yxvsw9].[tyr:Order Date:ok]' />
        <map key='[dataengine.42019.618651678240].[yr:Order Date:ok]' value='[federated.0z0pi331stuxay1ce6y5f1yxvsw9].[yr:Order Date:ok]' />
      </column-mapping>
    </datasource-relationship>
  </datasource-relationships>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <shared-views>
    <shared-view name='dataengine.42019.618651678240'>
      <datasources>
        <datasource caption='Sample - Superstore' name='dataengine.42019.618651678240' />
      </datasources>
      <datasource-dependencies datasource='dataengine.42019.618651678240'>
        <column datatype='date' name='[Order Date]' role='dimension' type='ordinal' />
        <column-instance column='[Order Date]' derivation='Year' name='[yr:Order Date:ok]' pivot='key' type='ordinal' />
      </datasource-dependencies>
      <filter class='categorical' column='[dataengine.42019.618651678240].[yr:Order Date:ok]'>
        <groupfilter function='member' level='[yr:Order Date:ok]' member='2019' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
    </shared-view>
  </shared-views>
  <worksheets>
    <worksheet name='Details by Product'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Details by Product</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Sample - Superstore' name='dataengine.42019.618651678240' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='New Business Growth' datatype='real' default-format='p0%' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='0.59999999999999998'>
              <calculation class='tableau' formula='0.59999999999999998' />
              <range granularity='0.01' max='1.0' min='0.0' />
            </column>
            <column caption='Churn Rate' datatype='real' default-format='p0.00%' name='[Parameter 2]' param-domain-type='range' role='measure' type='quantitative' value='0.064000000000000001'>
              <calculation class='tableau' formula='0.064000000000000001' />
              <range granularity='0.001' max='0.25' min='0.0' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='dataengine.42019.618651678240'>
            <column caption='Days to Ship Actual' datatype='integer' name='[Calculation_0831103151444568]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='DATEDIFF(&apos;day&apos;,[Order Date],[Ship Date])' />
            </column>
            <column caption='Sales Forecast' datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Calculation_5421109230915137]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Sales]*(1-[Parameters].[Parameter 2])*(1+[Parameters].[Parameter 1])' />
            </column>
            <column caption='Days to Ship Scheduled' datatype='integer' name='[Calculation_6861103170623145]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE  [Ship Mode]&#13;&#10;WHEN &quot;Same Day&quot; THEN 0&#13;&#10;WHEN &quot;First Class&quot; THEN 1&#13;&#10;WHEN &quot;Second Class&quot; THEN 3&#13;&#10;WHEN &quot;Standard Class&quot; THEN 6&#13;&#10;END' />
            </column>
            <column caption='Sales per Customer' datatype='real' default-format='C1033%' name='[Calculation_9321103144526191]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='Sum([Sales])/countD([Customer Name])' />
            </column>
            <column caption='Profit Ratio' datatype='real' default-format='p0.0%' name='[Calculation_9921103144103743]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Profit])/sum([Sales])' />
            </column>
            <column datatype='string' name='[Customer Name]' role='dimension' type='nominal' />
            <column datatype='real' default-format='p0.00%' name='[Discount]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column datatype='date' name='[Order Date]' role='dimension' type='ordinal' />
            <column datatype='string' name='[Order ID]' role='dimension' type='nominal' />
            <column datatype='string' name='[Product Name]' role='dimension' type='nominal' />
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Quantity]' role='measure' type='quantitative' />
            <column caption='Profit per Order' datatype='real' default-format='C1033%' name='[Sales per Customer (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='Sum([Profit])/countD([Order ID])' />
            </column>
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Sales]' role='measure' type='quantitative' />
            <column datatype='date' name='[Ship Date]' role='dimension' type='ordinal' />
            <column datatype='string' name='[Ship Mode]' role='dimension' type='nominal' />
            <column-instance column='[Product Name]' derivation='None' name='[none:Product Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_0831103151444568]' derivation='Sum' name='[sum:Calculation_0831103151444568:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_5421109230915137]' derivation='Sum' name='[sum:Calculation_5421109230915137:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_6861103170623145]' derivation='Sum' name='[sum:Calculation_6861103170623145:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Discount]' derivation='Sum' name='[sum:Discount:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Quantity]' derivation='Sum' name='[sum:Quantity:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_9321103144526191]' derivation='User' name='[usr:Calculation_9321103144526191:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_9921103144103743]' derivation='User' name='[usr:Calculation_9921103144103743:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sales per Customer (copy)]' derivation='User' name='[usr:Sales per Customer (copy):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Order Date]' derivation='Year' name='[yr:Order Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[dataengine.42019.618651678240].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[dataengine.42019.618651678240].[sum:Quantity:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[dataengine.42019.618651678240].[sum:Sales:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[dataengine.42019.618651678240].[sum:Profit:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[dataengine.42019.618651678240].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[dataengine.42019.618651678240].[sum:Quantity:qk]&quot;</bucket>
              <bucket>&quot;[dataengine.42019.618651678240].[sum:Sales:qk]&quot;</bucket>
              <bucket>&quot;[dataengine.42019.618651678240].[sum:Profit:qk]&quot;</bucket>
              <bucket>&quot;[dataengine.42019.618651678240].[sum:Calculation_0831103151444568:qk]&quot;</bucket>
              <bucket>&quot;[dataengine.42019.618651678240].[sum:Calculation_6861103170623145:qk]&quot;</bucket>
              <bucket>&quot;[dataengine.42019.618651678240].[sum:Discount:qk]&quot;</bucket>
              <bucket>&quot;[dataengine.42019.618651678240].[sum:Number of Records:qk]&quot;</bucket>
              <bucket>&quot;[dataengine.42019.618651678240].[usr:Calculation_9921103144103743:qk]&quot;</bucket>
              <bucket>&quot;[dataengine.42019.618651678240].[usr:Sales per Customer (copy):qk]&quot;</bucket>
              <bucket>&quot;[dataengine.42019.618651678240].[sum:Calculation_5421109230915137:qk]&quot;</bucket>
              <bucket>&quot;[dataengine.42019.618651678240].[usr:Calculation_9321103144526191:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[dataengine.42019.618651678240].[none:Product Name:nk]'>
            <groupfilter function='level-members' level='[none:Product Name:nk]' user:ui-manual-selection='true' user:ui-manual-selection-is-empty='true' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[dataengine.42019.618651678240].[none:Product Name:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[dataengine.42019.618651678240].[sum:Sales:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[dataengine.42019.618651678240].[yr:Order Date:ok]</column>
            <column>[dataengine.42019.618651678240].[:Measure Names]</column>
            <column>[dataengine.42019.618651678240].[none:Product Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[dataengine.42019.618651678240].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[dataengine.42019.618651678240].[none:Product Name:nk]</rows>
        <cols>[dataengine.42019.618651678240].[:Measure Names]</cols>
      </table>
      <simple-id uuid='{ECD86775-7C7F-40D2-BF4D-D25CA9CFB4E3}' />
    </worksheet>
    <worksheet name='Profit by Sub-Category'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sample - Superstore' name='dataengine.42019.618651678240' />
          </datasources>
          <datasource-dependencies datasource='dataengine.42019.618651678240'>
            <column datatype='date' name='[Order Date]' role='dimension' type='ordinal' />
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
            <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[pcto:sum:Profit:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Order Date]' derivation='Year' name='[yr:Order Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[dataengine.42019.618651678240].[yr:Order Date:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[dataengine.42019.618651678240].[none:Sub-Category:nk]' />
              <wedge-size column='[dataengine.42019.618651678240].[sum:Profit:qk]' />
              <size column='[dataengine.42019.618651678240].[sum:Profit:qk]' />
              <text column='[dataengine.42019.618651678240].[none:Sub-Category:nk]' />
              <text column='[dataengine.42019.618651678240].[pcto:sum:Profit:qk]' />
            </encodings>
            <customized-label>
              <formatted-text>
                <run fontcolor='#1b1b1b' fontsize='12'>&lt;[dataengine.42019.618651678240].[pcto:sum:Profit:qk]&gt;</run>
                <run>&#10;&lt;[dataengine.42019.618651678240].[none:Sub-Category:nk]&gt;</run>
              </formatted-text>
            </customized-label>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='2' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{6B966061-832D-4F46-A8C2-3BC43E141ED6}' />
    </worksheet>
    <worksheet name='Profit by sub-category'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Profit by sub-category</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Sample - Superstore' name='dataengine.42019.618651678240' />
          </datasources>
          <datasource-dependencies datasource='dataengine.42019.618651678240'>
            <column datatype='date' name='[Order Date]' role='dimension' type='ordinal' />
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
            <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[pcto:sum:Profit:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Order Date]' derivation='Year' name='[yr:Order Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[dataengine.42019.618651678240].[yr:Order Date:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[dataengine.42019.618651678240].[none:Sub-Category:nk]' />
              <wedge-size column='[dataengine.42019.618651678240].[sum:Profit:qk]' />
              <size column='[dataengine.42019.618651678240].[sum:Profit:qk]' />
              <text column='[dataengine.42019.618651678240].[pcto:sum:Profit:qk]' />
              <text column='[dataengine.42019.618651678240].[none:Sub-Category:nk]' />
            </encodings>
            <customized-label>
              <formatted-text>
                <run bold='true' fontsize='12'>&lt;[dataengine.42019.618651678240].[pcto:sum:Profit:qk]&gt;</run>
                <run>&#10;&lt;[dataengine.42019.618651678240].[none:Sub-Category:nk]&gt;</run>
              </formatted-text>
            </customized-label>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.637182354927063' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{1D641434-66EF-4DBF-91A8-C3075B31EE47}' />
    </worksheet>
    <worksheet name='Sales &amp; profit by date'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Sales &amp; profit by data</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Sample - Superstore' name='dataengine.42019.618651678240' />
          </datasources>
          <datasource-dependencies datasource='dataengine.42019.618651678240'>
            <column datatype='date' name='[Order Date]' role='dimension' type='ordinal' />
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Sales]' role='measure' type='quantitative' />
            <column-instance column='[Order Date]' derivation='None' name='[none:Order Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Order Date]' derivation='Year' name='[yr:Order Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[dataengine.42019.618651678240].[yr:Order Date:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[dataengine.42019.618651678240].[sum:Profit:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='0' field='[dataengine.42019.618651678240].[sum:Sales:qk]' scope='rows' value='false' />
            <format attr='display' class='0' field='[dataengine.42019.618651678240].[sum:Profit:qk]' scope='rows' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[dataengine.42019.618651678240].[:Measure Names]' />
            </encodings>
            <dropline drop-when='selected' haslabel='false' x-axis='true' y-axis='true' />
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[dataengine.42019.618651678240].[sum:Sales:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[dataengine.42019.618651678240].[:Measure Names]' />
            </encodings>
            <dropline drop-when='selected' haslabel='false' x-axis='true' y-axis='true' />
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[dataengine.42019.618651678240].[sum:Profit:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[dataengine.42019.618651678240].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>([dataengine.42019.618651678240].[sum:Sales:qk] + [dataengine.42019.618651678240].[sum:Profit:qk])</rows>
        <cols>[dataengine.42019.618651678240].[none:Order Date:qk]</cols>
      </table>
      <simple-id uuid='{C6DF797D-FF10-4B7F-AE08-63086B0C4CD1}' />
    </worksheet>
    <worksheet name='Sales by State'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sample - Superstore' name='dataengine.42019.618651678240' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='dataengine.42019.618651678240'>
            <column datatype='date' name='[Order Date]' role='dimension' type='ordinal' />
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Sales]' role='measure' type='quantitative' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Order Date]' derivation='Year' name='[yr:Order Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[dataengine.42019.618651678240].[yr:Order Date:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[dataengine.42019.618651678240].[none:State:nk]' />
              <color column='[dataengine.42019.618651678240].[sum:Sales:qk]' />
              <geometry column='[dataengine.42019.618651678240].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[dataengine.42019.618651678240].[Latitude (generated)]</rows>
        <cols>[dataengine.42019.618651678240].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{7FFE89AE-ACFC-46CA-B681-A944ABB82230}' />
    </worksheet>
    <worksheet name='Sales by state'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Sales by Sheet</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Sample - Superstore' name='dataengine.42019.618651678240' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='dataengine.42019.618651678240'>
            <column datatype='date' name='[Order Date]' role='dimension' type='ordinal' />
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Sales]' role='measure' type='quantitative' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Order Date]' derivation='Year' name='[yr:Order Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[dataengine.42019.618651678240].[yr:Order Date:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[dataengine.42019.618651678240].[Longitude (generated)]' field-type='quantitative' max='-6203845.7099826727' min='-15869217.788092686' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[dataengine.42019.618651678240].[Latitude (generated)]' field-type='quantitative' max='6393420.6982840244' min='3329035.700334711' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[dataengine.42019.618651678240].[none:State:nk]' />
              <color column='[dataengine.42019.618651678240].[sum:Sales:qk]' />
              <geometry column='[dataengine.42019.618651678240].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[dataengine.42019.618651678240].[Latitude (generated)]</rows>
        <cols>[dataengine.42019.618651678240].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{EBF1AA63-0552-45CE-8CE3-8BCFDDB1B603}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Dashboard 2'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Superstore Year Results</run>
          </formatted-text>
        </title>
      </layout-options>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <datasources>
        <datasource caption='Sample - Superstore' name='dataengine.42019.618651678240' />
      </datasources>
      <datasource-dependencies datasource='dataengine.42019.618651678240'>
        <column datatype='date' name='[Order Date]' role='dimension' type='ordinal' />
        <column-instance column='[Order Date]' derivation='Year' name='[yr:Order Date:ok]' pivot='key' type='ordinal' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='15' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='18' param='vert' type='layout-flow' w='98400' x='800' y='1000'>
            <zone h='5125' id='19' type='title' w='98400' x='800' y='1000'>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='4' />
              </zone-style>
            </zone>
            <zone h='92875' id='16' type='layout-basic' w='98400' x='800' y='6125' />
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
        <zone h='54875' id='3' name='Sales by state' w='96300' x='1900' y='5500' />
        <zone h='33125' id='8' name='Sales &amp; profit by date' w='31500' x='500' y='66250' />
        <zone h='4750' id='9' leg-item-layout='horz' name='Sales &amp; profit by date' pane-specification-id='1' param='[dataengine.42019.618651678240].[:Measure Names]' type='color' w='27700' x='500' y='60500' />
        <zone h='6250' id='11' mode='radiolist' name='Sales by state' param='[dataengine.42019.618651678240].[yr:Order Date:ok]' type='filter' values='database' w='25800' x='71000' y='1375' />
        <zone h='41125' id='12' name='Profit by sub-category' w='30700' x='33000' y='60375' />
        <zone h='45250' id='22' name='Details by Product' w='35300' x='63800' y='60500' />
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <layout-options>
            <title>
              <formatted-text>
                <run bold='true'>Superstore Year Results</run>
              </formatted-text>
            </title>
          </layout-options>
          <size maxheight='1350' minheight='1350' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='23' type='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='24' param='vert' type='layout-flow' w='98400' x='800' y='1000'>
                <zone h='5125' id='19' type='title' w='98400' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='6250' id='11' mode='dropdown' name='Sales by state' param='[dataengine.42019.618651678240].[yr:Order Date:ok]' type='filter' values='database' w='25800' x='71000' y='1375'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='54875' id='3' is-fixed='true' name='Sales by state' w='96300' x='1900' y='5500'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='41125' id='12' is-fixed='true' name='Profit by sub-category' w='30700' x='33000' y='60375'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='45250' id='22' is-fixed='true' name='Details by Product' w='35300' x='63800' y='60500'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='265' h='33125' id='8' is-fixed='true' name='Sales &amp; profit by date' w='31500' x='500' y='66250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='4750' id='9' leg-item-layout='horz' name='Sales &amp; profit by date' pane-specification-id='1' param='[dataengine.42019.618651678240].[:Measure Names]' type='color' w='27700' x='500' y='60500'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{7E2E885F-7E7D-4068-8F03-802235321671}' />
    </dashboard>
  </dashboards>
  <windows source-height='48'>
    <window class='worksheet' name='Profit by sub-category'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[dataengine.42019.618651678240].[none:Sub-Category:nk]' type='color' />
            <card pane-specification-id='0' param='[dataengine.42019.618651678240].[sum:Profit:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[dataengine.42019.618651678240].[none:Category:nk]</field>
            <field>[dataengine.42019.618651678240].[none:Sub-Category:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{24A0ED13-0264-4692-952E-70788B5EDE7D}' />
    </window>
    <window class='worksheet' name='Sales by State'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[dataengine.42019.618651678240].[sum:Sales:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[dataengine.42019.618651678240].[none:Region:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{3571FC0C-8CA7-4A67-AD35-8DCB60DED433}' />
    </window>
    <window class='worksheet' name='Sales &amp; profit by date'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[dataengine.42019.618651678240].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[dataengine.42019.618651678240].[none:Order Date:qk]</field>
            <field>[dataengine.42019.618651678240].[yr:Order Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{0425EF82-6952-4CFD-9B88-C57772B7E416}' />
    </window>
    <window class='worksheet' name='Profit by Sub-Category'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[dataengine.42019.618651678240].[sum:Profit:qk]' type='size' />
            <card pane-specification-id='0' param='[dataengine.42019.618651678240].[none:Sub-Category:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[dataengine.42019.618651678240].[none:Category:nk]</field>
            <field>[dataengine.42019.618651678240].[none:Sub-Category:nk]</field>
            <field>[dataengine.42019.618651678240].[yr:Order Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{521D2827-245D-4438-AB84-85BAE53CC327}' />
    </window>
    <window class='worksheet' name='Details by Product'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[dataengine.42019.618651678240].[:Measure Names]</field>
            <field>[dataengine.42019.618651678240].[none:Product Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{2AEEACD0-7E87-47E2-B577-3252CCBABEFE}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard 2'>
      <viewpoints>
        <viewpoint name='Details by Product' />
        <viewpoint name='Profit by sub-category'>
          <zoom type='entire-view' />
          <selection-collection>
            <tuple-selection>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields />
                    <y-fields />
                  </pane-descriptor>
                  <columns>
                    <field>[dataengine.42019.618651678240].[none:Sub-Category:nk]</field>
                    <field>[dataengine.42019.618651678240].[sum:Profit:qk]</field>
                    <field>[dataengine.42019.618651678240].[pcto:sum:Profit:qk]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>&quot;Accessories&quot;</value>
                  <value>19364.224399999988</value>
                  <value>0.12839645550375262</value>
                </tuple>
              </tuple-reference>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields />
                    <y-fields />
                  </pane-descriptor>
                  <columns>
                    <field>[dataengine.42019.618651678240].[none:Sub-Category:nk]</field>
                    <field>[dataengine.42019.618651678240].[sum:Profit:qk]</field>
                    <field>[dataengine.42019.618651678240].[pcto:sum:Profit:qk]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>&quot;Appliances&quot;</value>
                  <value>15974.482599999988</value>
                  <value>0.10592042841366629</value>
                </tuple>
              </tuple-reference>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields />
                    <y-fields />
                  </pane-descriptor>
                  <columns>
                    <field>[dataengine.42019.618651678240].[none:Sub-Category:nk]</field>
                    <field>[dataengine.42019.618651678240].[sum:Profit:qk]</field>
                    <field>[dataengine.42019.618651678240].[pcto:sum:Profit:qk]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>&quot;Art&quot;</value>
                  <value>2454.0571000000018</value>
                  <value>0.016271874707453744</value>
                </tuple>
              </tuple-reference>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields />
                    <y-fields />
                  </pane-descriptor>
                  <columns>
                    <field>[dataengine.42019.618651678240].[none:Sub-Category:nk]</field>
                    <field>[dataengine.42019.618651678240].[sum:Profit:qk]</field>
                    <field>[dataengine.42019.618651678240].[pcto:sum:Profit:qk]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>&quot;Binders&quot;</value>
                  <value>10911.891999999987</value>
                  <value>0.072352407548001429</value>
                </tuple>
              </tuple-reference>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields />
                    <y-fields />
                  </pane-descriptor>
                  <columns>
                    <field>[dataengine.42019.618651678240].[none:Sub-Category:nk]</field>
                    <field>[dataengine.42019.618651678240].[sum:Profit:qk]</field>
                    <field>[dataengine.42019.618651678240].[pcto:sum:Profit:qk]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>&quot;Bookcases&quot;</value>
                  <value>-91.286200000001088</value>
                  <value>-0.000605282415360091</value>
                </tuple>
              </tuple-reference>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields />
                    <y-fields />
                  </pane-descriptor>
                  <columns>
                    <field>[dataengine.42019.618651678240].[none:Sub-Category:nk]</field>
                    <field>[dataengine.42019.618651678240].[sum:Profit:qk]</field>
                    <field>[dataengine.42019.618651678240].[pcto:sum:Profit:qk]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>&quot;Chairs&quot;</value>
                  <value>20760.155400000011</value>
                  <value>0.13765231769711844</value>
                </tuple>
              </tuple-reference>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields />
                    <y-fields />
                  </pane-descriptor>
                  <columns>
                    <field>[dataengine.42019.618651678240].[none:Sub-Category:nk]</field>
                    <field>[dataengine.42019.618651678240].[sum:Profit:qk]</field>
                    <field>[dataengine.42019.618651678240].[pcto:sum:Profit:qk]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>&quot;Copiers&quot;</value>
                  <value>40781.709799999982</value>
                  <value>0.27040726648998414</value>
                </tuple>
              </tuple-reference>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields />
                    <y-fields />
                  </pane-descriptor>
                  <columns>
                    <field>[dataengine.42019.618651678240].[none:Sub-Category:nk]</field>
                    <field>[dataengine.42019.618651678240].[sum:Profit:qk]</field>
                    <field>[dataengine.42019.618651678240].[pcto:sum:Profit:qk]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>&quot;Envelopes&quot;</value>
                  <value>1695.5766000000006</value>
                  <value>0.011242692760527211</value>
                </tuple>
              </tuple-reference>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields />
                    <y-fields />
                  </pane-descriptor>
                  <columns>
                    <field>[dataengine.42019.618651678240].[none:Sub-Category:nk]</field>
                    <field>[dataengine.42019.618651678240].[sum:Profit:qk]</field>
                    <field>[dataengine.42019.618651678240].[pcto:sum:Profit:qk]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>&quot;Fasteners&quot;</value>
                  <value>471.31789999999984</value>
                  <value>0.003125121178386682</value>
                </tuple>
              </tuple-reference>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields />
                    <y-fields />
                  </pane-descriptor>
                  <columns>
                    <field>[dataengine.42019.618651678240].[none:Sub-Category:nk]</field>
                    <field>[dataengine.42019.618651678240].[sum:Profit:qk]</field>
                    <field>[dataengine.42019.618651678240].[pcto:sum:Profit:qk]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>&quot;Furnishings&quot;</value>
                  <value>6107.3474999999889</value>
                  <value>0.040495387542074955</value>
                </tuple>
              </tuple-reference>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields />
                    <y-fields />
                  </pane-descriptor>
                  <columns>
                    <field>[dataengine.42019.618651678240].[none:Sub-Category:nk]</field>
                    <field>[dataengine.42019.618651678240].[sum:Profit:qk]</field>
                    <field>[dataengine.42019.618651678240].[pcto:sum:Profit:qk]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>&quot;Labels&quot;</value>
                  <value>2202.9891000000002</value>
                  <value>0.014607142848096836</value>
                </tuple>
              </tuple-reference>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields />
                    <y-fields />
                  </pane-descriptor>
                  <columns>
                    <field>[dataengine.42019.618651678240].[none:Sub-Category:nk]</field>
                    <field>[dataengine.42019.618651678240].[sum:Profit:qk]</field>
                    <field>[dataengine.42019.618651678240].[pcto:sum:Profit:qk]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>&quot;Machines&quot;</value>
                  <value>-2517.2821000000022</value>
                  <value>-0.016691094487783536</value>
                </tuple>
              </tuple-reference>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields />
                    <y-fields />
                  </pane-descriptor>
                  <columns>
                    <field>[dataengine.42019.618651678240].[none:Sub-Category:nk]</field>
                    <field>[dataengine.42019.618651678240].[sum:Profit:qk]</field>
                    <field>[dataengine.42019.618651678240].[pcto:sum:Profit:qk]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>&quot;Paper&quot;</value>
                  <value>14692.777299999951</value>
                  <value>0.097421951318948333</value>
                </tuple>
              </tuple-reference>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields />
                    <y-fields />
                  </pane-descriptor>
                  <columns>
                    <field>[dataengine.42019.618651678240].[none:Sub-Category:nk]</field>
                    <field>[dataengine.42019.618651678240].[sum:Profit:qk]</field>
                    <field>[dataengine.42019.618651678240].[pcto:sum:Profit:qk]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>&quot;Phones&quot;</value>
                  <value>19378.197599999985</value>
                  <value>0.12848910622474119</value>
                </tuple>
              </tuple-reference>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields />
                    <y-fields />
                  </pane-descriptor>
                  <columns>
                    <field>[dataengine.42019.618651678240].[none:Sub-Category:nk]</field>
                    <field>[dataengine.42019.618651678240].[sum:Profit:qk]</field>
                    <field>[dataengine.42019.618651678240].[pcto:sum:Profit:qk]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>&quot;Storage&quot;</value>
                  <value>9068.0951999999907</value>
                  <value>0.060126925705869853</value>
                </tuple>
              </tuple-reference>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields />
                    <y-fields />
                  </pane-descriptor>
                  <columns>
                    <field>[dataengine.42019.618651678240].[none:Sub-Category:nk]</field>
                    <field>[dataengine.42019.618651678240].[sum:Profit:qk]</field>
                    <field>[dataengine.42019.618651678240].[pcto:sum:Profit:qk]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>&quot;Supplies&quot;</value>
                  <value>-849.43200000000024</value>
                  <value>-0.0056322450999619529</value>
                </tuple>
              </tuple-reference>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields />
                    <y-fields />
                  </pane-descriptor>
                  <columns>
                    <field>[dataengine.42019.618651678240].[none:Sub-Category:nk]</field>
                    <field>[dataengine.42019.618651678240].[sum:Profit:qk]</field>
                    <field>[dataengine.42019.618651678240].[pcto:sum:Profit:qk]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>&quot;Tables&quot;</value>
                  <value>-9588.9424000000072</value>
                  <value>-0.063580455935516242</value>
                </tuple>
              </tuple-reference>
            </tuple-selection>
          </selection-collection>
        </viewpoint>
        <viewpoint name='Sales &amp; profit by date'>
          <zoom type='entire-view' />
          <highlight field='[dataengine.42019.618651678240].[:Measure Names]'>
            <bucket-selection />
          </highlight>
        </viewpoint>
        <viewpoint name='Sales by state'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{11EF2BD1-F517-437B-AC1A-7AE774765EA4}' />
    </window>
    <window class='worksheet' hidden='true' name='Sales by state'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[dataengine.42019.618651678240].[sum:Sales:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[dataengine.42019.618651678240].[none:Region:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{76407C10-8EF3-4CDF-8317-5CD7C2F21583}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Dashboard 2' width='192'>
      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
      VnQzRIL/P3FcypKI77h/AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Details by Product' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Profit by Sub-Category' width='192'>
      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
      gg==
    </thumbnail>
    <thumbnail height='192' name='Profit by sub-category' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sales &amp; profit by date' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sales by State' width='192'>
      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
      xUT9xv8As6p/UPKnscAAAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
